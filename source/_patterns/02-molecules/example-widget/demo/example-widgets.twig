{% extends '@atoms/grid/_grid-1-up.twig' %}
{% set container = true %}

{% block column_1 %}
  <h1 class="mt-3">Example Vue Apps</h1>

  <p class="lead">
    <a href="https://vuejs.org/">Vue</a> is a flexible and robust UI library similar to React. <a href="https://vuex.vuejs.org/">VueX</a> is a simple state management solution that ties in natively to Vue. The following examples show off various ways to leverage Vue/X to meet feature requirements.
  </p>
  <p>Vue resources:</p>
  <ul>
    <li><a href="https://www.smashingmagazine.com/2018/02/jquery-vue-javascript/">Replacing jQuery With Vue.js: No Build Step Necessary</a></li>
    <li><a href="https://vuex.vuejs.org/">VueX documentation</a></li>
  </ul>

  <h2 class="mt-3">Vue in existing markup</h2>
  <p>View can work with markup that already exists in the DOM, similar to how we've always used jQuery.</p>

  <h3>Example:</h3>

  <form id="vue-html-example-1" class="p-5">
    <div class="input-group">
      <div class="input-group-prepend">
        <span class="input-group-text">You typed: <strong>{% raw %}{{ name }}{% endraw %}</strong></span>
      </div>
      <input class="form-control" type="text" v-model="name" placeholder="Send this text to outer space" />
      <div class="input-group-append">
        <button
          class="btn btn-outline-primary"
          type="button"
          @click="toSpace(name)"
        >ðŸš€ Send to space
        </button>
      </div>
    </div>
  </form>

  <p>The form above is instantiated entirely from HTML already existing in the page. This isn't optimal, but it is an option.</p>

  <div class="row">
    <div class="col-sm-6">
      <h4>HTML</h4>
      {% set example = '<form id="vue-html-example-1">
  <span>{{ name }}</span>
  <input v-model="name"/>
  <button @click="toSpace(name)">ðŸš€ Send to space</button>
</form>'%}
<pre><code class="language-html">{% autoescape %}{{ example }}{% endautoescape %}</code></pre>
    </div>
    <div class="col-sm-6">
      <h4>JavaScript</h4>
<pre><code class="language-javascript">new Vue({
  el: '#vue-html-example-1',
  data: {
    name: '',
  },
  methods: {
    toSpace() {
      alert(this.name);
    },
  },
})</code></pre>
    </div>
  </div>

  <h2 class="mt-3">Vue using .vue files</h2>

  <p>We can achieve the same application using a .vue file and attach it to an id.</p>
  <h3>Example:</h3>
  <div id="vue-html-example-2"></div>
  <p>The .vue file encapsulates templating, logic, AND styles. This is ideal.</p>
  <div class="row">
    <div class="col-sm-6">
      <h4>.vue</h4>
      {% set example = '<template>
  <form id="vue-html-example-1">
    <span>{{ name }}</span>
    <input v-model="name"/>
    <button @click="toSpace(name)">ðŸš€ Send to space</button>
  </form>
</template>
<script>
export default {
  data: () => ({
    name: \'\',
  }),
  methods: {
    toSpace() {
      alert(this.name);
    },
  },
};
</script>'%}
      <pre><code class="language-html">{% autoescape %}{{ example }}{% endautoescape %}</code></pre>
    </div>
    <div class="col-sm-6">
      <h4>JavaScript</h4>
      {% set example = "import VueExample2 from './vue-html-example.vue';

new Vue({
  el: '#vue-html-example-2',
  components: { VueExample2 },
  template: '<VueExample2/>',
})" %}
<pre><code class="language-javascript">{% autoescape %}{{ example }}{% endautoescape %}</code></pre>
    </div>
  </div>

  <h2 class="mt-3">VueX</h2>
  <p>Below is an same application implemented in both regular Vue and then in Vue + VueX. Check src/ for respective implementation details.</p>

  <div class="row">
    <div class="col-sm-6">
      <h2>Vue</h2>
      {% include '@molecules/example-widget/_vue-facet-table-vue.twig' %}
    </div>
    <div class="col-sm-6">
      <h2>Vue + VueX</h2>
      {% include '@molecules/example-widget/_vue-facet-table-vuex.twig' %}
    </div>
  </div>

  <h1 id="mt-3'">Vue Styles:</h1>
  <div id="vue-example-widget"></div>
{% endblock column_1 %}
